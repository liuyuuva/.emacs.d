* Open mingw64 shell 
* Verify that the following packages are installed using "pacman -Qs /name of package/"
#+begin_src sh
mingw-w64-x86_64-clang 
mingw-w64-x86_64-clang-tools-extra 
mingw64/mingw-w64-x86_64-polly 
mingw-w64-x86_64-cmake 
mingw-w64-x86_64-jq 
mingw-w64-x86_64-ninja 
mingw-w64-x86_64-ncurses
#+end_src

* Clone "ccls" repo:
#+begin_src sh
git clone --recursive https://github.com/MaskRay/ccls
cd ccls
git submodule update --init #To prevent "nothing to describe" error
#+end_src
* Cmake
#+begin_src sh
$ cmake -H. -BRelease -G Ninja -DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS
-- The CXX compiler identification is GNU 8.2.0
-- Check for working CXX compiler: C:/msys64/mingw64/bin/c++.exe
-- Check for working CXX compiler: C:/msys64/mingw64/bin/c++.exe -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Setting build type to 'Release' as none was specified.
-- Looking for C++ include pthread.h
-- Looking for C++ include pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE
-- Configuring done
-- Generating done
-- Build files have been written to: C:/Users/YLiu/Downloads/ccls/Release
#+end_src
* Make
#+begin_src sh
 ninja -C Release
#+end_src
there will be some warnings, but .exe file is generated. Put exe file under C:\bin\ccls\ccls.exe. (Optional) can add c:\bin\ccls to $PATH
* emacs setup
** comment out all irony related config, since we will not use irony for autocomplete
** comment out gtags related config, as we will use ccls for tag-like function
** install lsp-mode, lsp-ui, and company-lsp; install emacs-ccls, helm-xref
** add the following setting in init.el
#+begin_src lisp

(use-package ccls
  :ensure t
  :hook (
	   (c-mode c++-mode) .
	   (lambda () (require 'ccls) (lsp)))
  :init 
   	(setq ccls-executable "c:/bin/ccls/ccls.exe")
  
	)

(use-package helm-xref
  :ensure t
  :init (setq xref-show-xrefs-function 'helm-xref-show-xrefs)
  )


(use-package lsp-mode
  :ensure t
  :commands lsp
  :config
  (progn
	(setq lsp-prefer-flymake nil); prefer flycheck
	)
  )

(setq xref-prompt-for-identifier '(not xref-find-definitions
                                            xref-find-definitions-other-window
                                            xref-find-definitions-other-frame
                                            xref-find-references)) ;to prevent error in finding references
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  			  
	  )

(use-package company-lsp
  :ensure t
  :commands company-lsp)

#+end_src
** run M-x company-diag and make sure Used backend: includes company-lsp
* ccls file and example project structure
** Set up a project with the following structure
#+begin_src sh
project root --- include 
             |
             |-- src
#+end_src
** put all .h files in include folder, and all .c or .cpp files in src folders
** put an empty .ccls-root file under "project folder"
** write a .ccls file under "project folder" with the following content
#+begin_src lisp
clang
%c -std=c11
%cpp -std=c++14
%h -x c++-header
-Iinclude ;; don't use relative path if using this type
-Isrc     ;; don't use relative path
#+end_src
** open a cpp file, try goto definition and goto references, as well as autocomplete. It should work.
* ccls file with headers with relative path 
Using apollo project as an example. All the header files used are with
the following relative path format
#+begin_src c++
#include "modules/common/adapters/adapter_manager.h"
#include "modules/common/log.h"
#include "modules/common/time/time.h"
#include "modules/common/vehicle_state/vehicle_state_provider.h"
#include "modules/control/common/control_gflags.h"
#+end_src
Modules folder is inside the project root folder "apollo", so in ccls
file we can specify the path to the modules folder as:
#+begin_src lisp
clang
%c -std=c11
%cpp -std=c++14
%h -x c++-header
-I. ;; tell ccls the path to "modules" folder. Works well for Apollo 
#+end_src
* reuse of ccls file
** look at the cpp file and find out about the relative path in the header
google protobuf example:
#+begin_src c++
#include <google/protobuf/any.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/port_def.inc>
#+end_src
** From the above code, we see that the top folder the path refers to is "google"
** We can see that above the google folder, the path has 2 levels: \/protobuf\/src\/google
** So we can copy our apollo .ccls file and .ccls-root files to the src folder. 
** since in the ccls file, there is a line: "-I.", the system would know that "src" is the location of the source files. All the top header path location "google" will be checked in here.
** Indeed, "google" is in "src". In a way, we connected the "-I." for "src" folder with the relative paths "google\/protobuf\/**.h" to form a complete and valid path to the header files, thus the ccls server can successfully find the information.
** I didn't change ccls file. simply by placing it in the "src" folder, I could see the correct class definition in the "sideline" when browsing the code.
